# -*- coding: utf-8 -*-
"""Assignment-4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11F-tOukQ8NeKbXPmYh_qV2fnqFEE9fg5

1. DATA MANIPULATION
# a. Read the provided CSV file ‘data.csv’.
"""

import numpy as np
import pandas as pd

df=pd.read_csv("/content/data.csv")
df.head()

"""# c. Show the basic statistical description about the data"""

df.info()


description = df.describe()
print(description)

"""# d. Check if the data has null values.

"""

null_values = df.isnull().sum()
print(null_values)

"""# i. Replace the null values with the mean"""

df.fillna(df.mean(), inplace=True)
null_values_after = df.isnull().sum()
print(null_values_after)

"""# E. Select at least two columns and aggregate the data using: min, max, count, mean"""

selected_columns = ['Pulse', 'Calories']

aggregated_data = df[selected_columns].agg(['min', 'max', 'count', 'mean'])

print(aggregated_data)

"""# f. Filter the dataframe to select the rows with calories values between 500 and 1000."""

filtered_df = df[(df['Calories'] >= 500) & (df['Calories'] <= 1000)]

print("Filtered DataFrame:")
print(filtered_df)

"""# g. Filter the dataframe to select the rows with calories values > 500 and pulse < 100."""

filtered_df2 = df[(df['Calories'] > 500) & (df['Pulse'] < 100)]

print("Filtered DataFrame:")
print(filtered_df2)

"""# h. Create a new “df_modified” dataframe that contains all the columns from df except for “Maxpulse”."""

df_modified3 = df.drop(columns=['Maxpulse'])
print(df_modified3)

"""# i. Delete the “Maxpulse” column from the main df dataframe


"""

df.drop(columns=['Maxpulse'], inplace=True)

print(df)

"""# j. Convert the datatype of Calories column to int datatype"""

df['Calories'] = df['Calories'].round().astype(int)
print(df)
df.info()

"""# k. Using pandas create a scatter plot for the two columns (Duration and Calories)."""

import matplotlib.pyplot as plt

df = pd.DataFrame(df)

df.plot.scatter(x='Duration', y='Calories', title='Scatter Plot: Duration vs Calories')
plt.xlabel('Duration')
plt.ylabel('Calories')
plt.show()

"""# 2) Linear Regression
# a) Import the given “Salary_Data.csv”
"""

df2=pd.read_csv("/content/Salary_Data (2).csv")
print(df2)

df2.info()

"""# b) Split the data in train_test partitions, such that 1/3 of the data is reserved as test subset."""

from sklearn.model_selection import train_test_split

X = df2[['YearsExperience']]
y = df2['Salary']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/3, random_state=42)

"""# c) Train and predict the model."""

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train)
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

"""# d)Calculate the mean_squared error"""

from sklearn.metrics import mean_squared_error

mse_train = mean_squared_error(y_train, y_pred_train)

mse_test = mean_squared_error(y_test, y_pred_test)

print("Mean Squared Error (Train):", mse_train)
print("Mean Squared Error (Test):", mse_test)

"""# e) Visualize both train and test data using scatter plot."""

plt.figure(figsize=(10, 6))
plt.scatter(X_train, y_train, color='blue', label='Training Data')
plt.scatter(X_test, y_test, color='red', label='Test Data')
plt.plot(X_train, y_pred_train, color='green', linewidth=2, label='Regression Line')

plt.title('Linear Regression - Salary Prediction')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.legend()
plt.show()